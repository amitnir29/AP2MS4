using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace FlightControlWeb.Flight
{
    public class FlightBuilder : IFlightBuilder
    {
        private string flightID;
        /// <summary>
        /// The id of the flight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flight_id")]
        [JsonPropertyName("flight_id")]
        public string FlightID
        {
            set => flightID = value;
        }


        private int passengers;
        /// <summary>
        /// Number of passengers on the flight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passengers")]
        [JsonPropertyName("passengers")]
        public int Passengers
        {
            set => passengers = value;
        }


        private string company;
        /// <summary>
        /// The company managing the flight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company_name")]
        [JsonPropertyName("company_name")]
        public string Company
        {
            set => company = value;
        }


        private bool isExternal;
        /// <summary>
        /// Inidcate if the flight has been recieed from an external server or if it was generated by this server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_external")]
        [JsonPropertyName("is_external")]
        public bool IsExternal
        {
            set => isExternal = value;
        }


        private double longitude;
        /// <summary>
        /// The longitude position of the flight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude")]
        [JsonPropertyName("longitude")]
        public double Longitude
        {
            set
            {
                if (-180 <= value && value <= 180)
                    longitude = value;
                else
                    throw new ArgumentException("Longitude should be between -180 and 180");
            }
        }


        private double latitude;
        /// <summary>
        /// The latitude position of the flight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude")]
        [JsonPropertyName("latitude")]
        public double Latitude
        {
            set => latitude = value;
        }


        private string time;
        /// <summary>
        /// The time in UTC that the flight is relative to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date_time")]
        [JsonPropertyName("date_time")]
        public string Time
        {
            set => time = value;
        }


        /// <summary>
        /// Create a flight.
        /// </summary>
        /// <returns> FLight based on the builder. </returns>
        public Flight Create()
        {
            return new Flight(flightID, longitude, latitude, passengers, company, DateTime.Parse(time), isExternal);
        }
    }
}
